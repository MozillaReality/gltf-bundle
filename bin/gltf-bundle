#!/usr/bin/env node

const program = require("commander");
const createBundle = require("../src/index");
const fs = require("fs-extra");
const path = require("path");
const glob = require("glob-promise");
const package = fs.readJSONSync(path.join(__dirname, "..", "package.json"));

program
  .version(package.version)
  .usage("[configPath]")
  .option("-o --out <out>", "Bundle output path (required).");

program.on("--help", function() {
  console.log(`
  Examples:
    1. Search all subdirectories for *.bundle.config.json files and output bundles
    in out dir.

    $ gltf-bundle -o ./out

    2. Specify a bundle config file and output to the out directory.

    $ gltf-bundle ./avatar.bundle.config.json -o ./out
`);
});

program.parse(process.argv);

execute()
  .then(() => {
    console.log("Done!");
  })
  .catch(err => {
    throw err;
  });

async function execute() {
  let outPath = program.out;

  if (outPath === undefined) {
    console.error("-o or --out parameter was not specified");
    process.exit(1);
  }

  try {
    await fs.remove(outPath);
  } catch (e) {}

  let globPath = "**/*.bundle.config.json";

  let configPath;

  if (program.args.length > 0) {
    configPath = program.args[0];
  } else {
    configPath = "";
  }

  if (configPath) {
    configPath = configPath.endsWith("/") ? configPath : configPath + "/";
    globPath = configPath + globPath;
  }

  const matches = await glob(globPath, { absolute: true });

  for (const match of matches) {
    const [bundlePath, versionedBundlePath] = await createBundle(
      match,
      outPath
    );
    console.log(`Wrote bundle to ${bundlePath}`);
    console.log(`Wrote bundle to ${versionedBundlePath}`);
  }
}
